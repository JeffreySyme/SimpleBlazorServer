@inherits ValidationComponent
@inject IValidator<GetWeatherForecast.Query> Validator

<Modal @ref="modalRef">
    <ModalBackdrop />
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>Weather Forecast Filter</ModalTitle>
            <CloseButton Clicked="Dismiss" />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="Validations" Mode="ValidationMode">
                <Validation Validator="async e => await ValidateFieldAsync(e, nameof(GetWeatherForecast.Query.WeatherForecastId))">
                    <Field Horizontal>
                        <FieldLabel ColumnSize="ColumnSize.Is2">ID</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is10">
                            <NumericEdit @bind-Value="Query.WeatherForecastId">
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </NumericEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                <Field Horizontal>
                    <FieldLabel ColumnSize="ColumnSize.Is2">Summary</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is10">
                        <TextEdit @bind-Text="Query.Summary" />
                    </FieldBody>
                    </Field>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="ClearFilters">Clear Filters</Button>
            <Button Color="Color.Primary" Clicked="Close"><Icon Name="@("fa fa-filter")" /> Filter</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    Modal modalRef;

    GetWeatherForecast.Query Query { get; set; } = new GetWeatherForecast.Query();

    [Parameter]
    public EventCallback<GetWeatherForecast.Query> OnClose { get; set; } = new EventCallback<GetWeatherForecast.Query>();

    public void ClearFilters()
    {
        Query = new GetWeatherForecast.Query();
    }

    public async void Close()
    {
        if (!ValidateAll())
            return;

        Dismiss();

        await OnClose.InvokeAsync(Query);
    }

    public void Dismiss()
    {
        modalRef.Hide();
    }

    public void Show(GetWeatherForecast.Query query)
    {
        Query = query;

        modalRef.Show();
    }

    private async Task ValidateFieldAsync(ValidatorEventArgs args, string fieldName)
    {
        var validationResult = await Validator.ValidateAsync(Query, default, fieldName);
        if (!validationResult.IsValid)
            SetValidationState(args, validationResult);
    }
}
